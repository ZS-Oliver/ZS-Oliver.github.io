<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Git常用操作及常见问题解决]]></title>
    <url>%2F2018%2F12%2F07%2FGit%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%8F%8A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%2F</url>
    <content type="text"><![CDATA[Git常用操作及问题解决与远程仓库建立连接 在远程仓库新建一个项目 生成本地的git管理,在terminal或git里输入 git init 将项目中所有文件添加到仓库中 git add -A 添加对本次提交的注释 git commit -m “” (双引号内为对于本次提交的注释内容) 将本地的仓库关联到远程仓库 git remote add origin https://github.com/ZS-Oliver/go.git 将代码上传到远程仓库 git push -u origin master(-u操作,Git不但会把本地的master分支内容推送到远程新的master分支,还会把本地的master分支和远程的master分支关联起来,在以后的推送或者拉取时就可以简化命令) 分支问题 查看分支信息 branch```1* 在本地新建一个分支 ``` git branch newBranchName 切换分支 checkout branch```1* 在本地创建并切换到新分支 ``` git checkout -b newBranchName 将新分支发布到远程仓库 push origin newBranchName```1* 在本地删除一个分支 ``` git branch -d newBranchName 删除远程仓库的一个分支 push origin :newBranchName/git push origin -delete newBranchName删除远程分支后,对应的本地分支并不会同步删除```1* 合并指定分支到当前分支 ``` git merge branchName stash 把本地修改且未提交的内容,存储到本地栈的栈顶 stash```1* 把保存在本地栈的代码pop到本地 ``` git stash pop stash的同时,存储一个log日志 stash save ""```(双引号为日志内容)1* 查看本地存储的stash日志 ``` git stash list stash多个日志时,有选择的pop stash apply stash@&#123;&#125;```(@&#123;&#125;为对应日志序号)1* 清空暂存栈 ``` git stash clear 回退 撤销一次提交 revert```1* 回退到上一个版本 git reset –hard HEAD^ // 回退到上一版本，(Git中, HEAD 表示当前版本,也就是最新的提交,HEAD^ 为上一个版本,HEAD^^为上上个版本,也可以用HEAD~3表示)git reset –hard 版本号 // 回退到指定版本(版本号只需要写前几位)1* 将暂存区的修改撤销掉,重新放回工作区 ```git reset HEAD &lt;file&gt; // 使用git rm删除文件后,复原操作,需要先git reset HEAD &lt;file&gt;,然后再git checkout -- &lt;file&gt; 将工作区的修改全部撤销 checkout -- filefile为要撤销的文件```1* 撤销上一次的合并分支 ```git merge --abort 其他 查看日志 log```1* 查看暂存区状态 ``` git status 查看之前的所有命令日志 reflog```1* 删除文件 rm file // 删除本地文件 git rm file // 从版本库中删除文件 1234567891011121314151617### 问题原因及解决方法* 问题: **Another git process semms to be running in this repository, e.g. an editor opened by ‘git commit’. Please make sure all processes are terminated then try again. If it still fails, a git process remove the file manually to continue…**原因: git被另外一个程序占用，重启机器也不能够解决。Git在使用过程中遭遇了奔溃，部分被上锁资源没有被释放导致的。解决方法: 进入项目文件夹下的 .git文件中（显示隐藏文件夹或rm .git/index.lock）删除index.lock文件即可。**** 问题: **There is no tracking information for the current branch.Please specify which branch you want to merge with.*** 原因: 本地分支和远程分支没有建立联系 (使用git branch -vv 可以查看本地分支和远程分支的关联关系) * 解决方法: ```git branch --set-upstream-to=origin/远程分支的名字 本地分支的名字 问题: 使用git pull提示refusing to merge unrelated histories 原因: 远程仓库origin上的分支master和本地分支master被Git认为是不同的仓库，所以不能直接合并。 解决方法:12git pull --allow-unrelated-histories解决冲突后再执行 git push 问题: hint: Updates were rejected because the tip of your current branch is behindhint: its remote counterpart. Merge the remote changes (e.g. ‘git pull’)hint: before pushing again.hint: See the ‘Note about fast-forwards’ in ‘git push –help’ for details. 原因: 远程repository和本地的repository冲突 解决方法: 新建分支,切换到新分支,pull,然后切换到主分支,合并分支,解决冲突]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux常用命令整理]]></title>
    <url>%2F2018%2F12%2F07%2FLinux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[Linux常用命令整理用户操作 新建用户(以下命令必须在root权限下使用)123456// 新建用户后,用户信息会保存在/home和/etc/passwd下useradd visitor // 新建用户，用户名为visitorpasswd visitor // 为新建用户设置密码userdel visitor // 删除用户visitorrm -rf visitor // 删除用户visitor所在目录 新建用户组 1234groupadd visitgroup // 添加用户组groupdel visitgroup // 删除用户组gpasswd -a visitor visitgroup // 把用户visitor添加到visitgroup组中(加入组后,visitor获得visitgroup组所有权限)gpasswd -d visitor visitgroup // 把用户visitor移出visitgroup组 切换用户 1su // su是switch user的缩写,exit即退回到刚才的用户状态 切换目录 12345cd xx // 切换到该目录下的xx目录cd .. // 切换到上一层目录cd / // 切换到系统根目录cd ~ // 切换到用户主目录cd - // 切换到上一个所在目录 目录操作(增删查改) 1234567mkdir xx // 增加名为xx的目录ls或者ll // 查看目录详细信息find /home -name &quot;*.txt&quot; // 查找/home目录下以.txt结尾的文件。(-iname忽略大小写)mv 目录名称 新目录名称 // 修改目录的名称mv 目录名称 目录的新位置 // 移动目录的位置cp -r 目录名称 目录拷贝的目标位置 // 拷贝目录rm -rf 目录/文件/压缩包 // 删除操作 文件操作(增删查改) 123456789101112touch 文件名称 // 文件的创建cat/more/less/tail 文件名称 // 文件的查看 cat:只能显示最后一屏内容 more:显示百分比，回车向下一行,空格向下一页，q退出查看 less:使用键盘上的PgUp和PgDn向上向下翻页，q结束查看 tail-10:查看文件的后10行，Ctrl+C结束(注)tail -f 文件 // 可以对某个文件进行动态监控vim 文件 // 修改文件的内容 i // 进入编辑模式 Esc // 进入底行模式,输入:wq/q! (输入wq代表写入内容并退出，即保存；输入q!代表强制退出不保存) 输入./进入文件搜索，输入要搜索的单词，回车，即可跳转到该单词所在的位置。rm -rf 文件 // 删除文件 压缩操作 1234567tar -zcvf 打包压缩后的文件名 要打包压缩的文件 // 打包并压缩文件,压缩后的文件以 .tar.gz结尾 z：调用gzip压缩命令进行压缩 c：打包文件 v：显示运行过程 f：指定文件名tar -xvf 压缩文件 // 解压压缩包 x：代表解压 其他操作 1234567891011pwd // 显示当前所在位置grep 要搜索的字符串 要搜索的文件 --color // 搜索命令，--color代表高亮显示shutdown -r now // 立即重启服务器wc // 统计指定文件中的字节数、字数、行数，并将统计结果显示输出。 命令格式：wc [选项]文件... 命令参数： -c 统计字节数。 -l 统计行数。 -m 统计字符数。这个标志不能与 -c标志一起使用。 -w 统计字数。一个字被定义为由空白、跳格或换行字符分隔的字符串。 -L 打印最长行的长度]]></content>
  </entry>
</search>
